
services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: taskflow
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - taskflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:alpine
    networks:
      - taskflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "15672:15672"  # Management UI
    networks:
      - taskflow-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build: ./backend
    environment:
      DB_HOST: db
      DB_NAME: taskflow
      DB_USER: postgres
      DB_PASSWORD: password
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - taskflow-network
    restart: unless-stopped

  # Worker Service
  worker:
    build: ./worker
    environment:
      RABBITMQ_HOST: rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - taskflow-network
    restart: unless-stopped
    deploy:
      replicas: 2

  # Frontend
  frontend:
    build: ./frontend
    networks:
      - taskflow-network

  # Nginx API Gateway
  nginx:
    build: ./nginx
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    networks:
      - taskflow-network
    restart: unless-stopped

volumes:
  db-data:

networks:
  taskflow-network:
    driver: bridge
